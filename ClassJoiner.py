# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ClassJoinerUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys

import time

import webbrowser

import os

import pyautogui

from PyQt5.QtCore import QObject, QThread, pyqtSignal

from PyQt5 import QtCore, QtGui, QtWidgets

class Worker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(int)
    #METHODS TO RUN AUTOJOINER


    def getDay(self):
        timeInfo = time.ctime()
        #find the day
        day = timeInfo[0:3]
        return(day)

    def getTrueTime(self):
        timeInfo = time.ctime()
        #get full time
        t = timeInfo[11:16]
        #find the hour
        hour = t[0:2]
        #find the minute
        minute = t[3:5]
        #find the number of minutes that have passed
        trueTime = int(hour) * 60 + int(minute)
        #send back trueTime
        return(trueTime)

    def openLink(self, s):
        if(s == "NONE"):
            print("no class right now")
        else:
            webbrowser.open(s)
            pyautogui.moveTo(300, 500)
            time.sleep(2)
            pyautogui.click()
            self.joinClass()
    def joinClass(self):
        f = open("Coordinates.txt", "r")
        sX1 = int(f.readline().rstrip())
        sY1 = int(f.readline().rstrip())
        sX2 = int(f.readline().rstrip())
        sY2 = int(f.readline().rstrip())
        bbX = int(f.readline().rstrip())
        bbY = int(f.readline().rstrip())
        '''print(sX1)
        print(sY1)
        print(sX2)
        print(sY2)'''
        f.seek(0)
        f.close()
        time.sleep(3)
        pyautogui.moveTo(bbX, bbY)
        time.sleep(2)
        pyautogui.click()
        time.sleep(2)
        pyautogui.moveTo(sX1, sY1)
        time.sleep(2)
        pyautogui.click()
        time.sleep(2)
        pyautogui.moveTo(sX2, sY2)
        pyautogui.click()
        time.sleep(1)


    def run(self):
        """Long-running task."""

        #getting links

        #period 1 link
        f = open("Period1.txt", "r")
        self.p1Link = f.read()
        f.seek(0)
        f.close()
        
        #period 2 link
        f = open("Period2.txt", "r")
        self.p2Link = f.read()
        f.seek(0)
        f.close()

        
        #period 4 link
        f = open("Period4.txt", "r")
        self.p4Link = f.read()
        f.seek(0)
        f.close()
        
        #period 5 link
        f = open("Period5.txt", "r")
        self.p5Link = f.read()
        f.seek(0)
        f.close()
        
        #period 6 link
        f = open("Period6.txt", "r")
        self.p6Link = f.read()
        f.seek(0)
        f.close()
        
        #period 7 link
        f = open("Period7.txt", "r")
        self.p7Link = f.read()
        f.seek(0)
        f.close()
        
        #period 8 link
        f = open("Period8.txt", "r")
        self.p8Link = f.read()
        f.seek(0)
        f.close()
        
        #advisory link
        f = open("Advisory.txt", "r")
        self.advisoryLink = f.read()
        f.seek(0)
        f.close()

        #extraneous 1 info
        f = open("Extraneous1.txt", "r")
        e1Day = f.readline().rstrip()
        e1Link = f.readline().rstrip()
        e1StartTime = int(f.readline().rstrip())
        e1EndTime = int(f.readline().rstrip())
        f.seek(0)
        f.close()

        #extraneous 2 info
        f = open("Extraneous2.txt", "r")
        e2Day = f.readline().rstrip()
        e2Link = f.readline().rstrip()
        e2StartTime = int(f.readline().rstrip())
        e2EndTime = int(f.readline().rstrip())
        f.seek(0)
        f.close()

        #extraneous 3 info
        f = open("Extraneous3.txt", "r")
        e3Day = f.readline().rstrip()
        e3Link = f.readline().rstrip()
        e3StartTime = int(f.readline().rstrip())
        e3EndTime = int(f.readline().rstrip())
        f.seek(0)
        f.close()

        '''print(e1Day)
        print(e1Link)
        print(e1StartTime)
        print(e1EndTime)
        print(e2Day)
        print(e2Link)
        print(e2StartTime)
        print(e2EndTime)
        print(e3Day)
        print(e3Link)
        print(e3StartTime)
        print(e3EndTime)'''

        #loop while running
        r = 1
        while(r == 1):
            day = self.getDay()
            trueTime = self.getTrueTime()

            print(day)
            print(trueTime)
            if(((day == "Tue") or (day == "Thu")) and (trueTime == 499)):
                self.openLink(self.p1Link)
            if((day == "Tue") and (trueTime == 589)):
                self.openLink(self.advisoryLink)
            if((day == "Thu") and (trueTime == 589)):
                self.openLs()
            if(((day == "Tue") or (day == "Thu")) and (trueTime == 634)):
                self.openLs()
            if(((day == "Tue") or (day == "Thu")) and (trueTime == 679)):
                self.openLink(self.p5Link)
            if(((day == "Tue") or (day == "Thu")) and (trueTime == 809)):
                self.openLink(self.p7Link)
            if(((day == "Wed") or (day == "Fri")) and (trueTime == 499)):
                self.openLink(self.p2Link)
            if(((day == "Wed") or (day == "Fri")) and (trueTime == 589)):
                self.openLink(self.p4Link)
            if(((day == "Wed") or (day == "Fri")) and (trueTime == 679)):
                self.openLink(self.p6Link)
            if(((day == "Wed") or (day == "Fri")) and (trueTime == 809)):
                self.openLink(self.p8Link)
            if((day == e1Day) and (trueTime == (e1StartTime-1))):
                self.openLink(e1Link)
            if((day == e2Day) and (trueTime == (e2StartTime-1))):
                self.openLink(e2Link)
            if((day == e3Day) and (trueTime == (e3StartTime-1))):
                self.openLink(e3Link)
            if((day == e1Day) and (trueTime == (e1EndTime))):
                os.system("taskkill /im chrome.exe /f")
            if((day == e2Day) and (trueTime == (e2EndTime))):
                os.system("taskkill /im chrome.exe /f")
            if((day == e3Day) and (trueTime == (e3EndTime))):
                os.system("taskkill /im chrome.exe /f")
            if(((day == "Tue") or (day == "Thu")) and (trueTime == 630)):
                os.system("taskkill /im chrome.exe /f")
            if(((day == "Tue") or (day == "Thu") or (day == "Wed") or (day == "Fri")) and ((trueTime == 580) or (trueTime == 670) or (trueTime == 800) or (trueTime == 890))):
                os.system("taskkill /im chrome.exe /f")
            time.sleep(60)
            f = open("endCode.txt", "r+")
            status = f.read().rstrip()
            if(status == "END"):
                f.truncate(0)
                f.seek(0)
                f.close()
                r = 2
        #print day code
        print("done")
        self.finished.emit()
    def openLs(self):
        #add code to figure our last ls
        #last LS
        f = open("LS.txt", "r+")
        lastLS = int(f.read())
        f.seek(0)

        #current LS
        currentLS = lastLS + 1
        
        if(currentLS == 3):
            currentLS = currentLS + 1
        if(currentLS == 9):
            currentLS = 1


        #store currentLS into file
        
        cL = str(currentLS)
        print(cL)
        f.truncate(0)
        f.seek(0)
        f.write(cL)
        f.close()

        
        if(currentLS == 1):
            #open LS1 link
            self.openLink(self.p1Link)
        if(currentLS == 2):
            #open LS2 link
            self.openLink(self.p2Link)
        if(currentLS == 4):
            #open LS4 link
            self.openLink(self.p4Link)
        if(currentLS == 5):
            #open LS5 link
            self.openLink(self.p5Link)
        if(currentLS == 6):
            #open LS6 link
            self.openLink(self.p6Link)
        if(currentLS == 7):
            #open LS7 link
            self.openLink(self.p7Link)
        if(currentLS == 8):
            #open LS8 link
            self.openLink(self.p8Link)

class Ui_MainWindow(QtWidgets.QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")



        self.welcomeLabel = QtWidgets.QLabel(self.centralwidget)
        self.welcomeLabel.setGeometry(QtCore.QRect(290, 10, 211, 16))
        self.welcomeLabel.setObjectName("welcomeLabel")



        self.instructionsLabel = QtWidgets.QLabel(self.centralwidget)
        self.instructionsLabel.setGeometry(QtCore.QRect(230, 40, 351, 20))
        self.instructionsLabel.setObjectName("instructionsLabel")



        self.disclaimerLabel = QtWidgets.QLabel(self.centralwidget)
        self.disclaimerLabel.setGeometry(QtCore.QRect(160, 70, 1500, 20))
        self.disclaimerLabel.setObjectName("disclaimerLabel")



        self.extraneousHeaderLabel = QtWidgets.QLabel(self.centralwidget)
        self.extraneousHeaderLabel.setGeometry(QtCore.QRect(320, 300, 161, 20))
        self.extraneousHeaderLabel.setObjectName("extraneousHeaderLabel")



        self.extraneousIntructionLabel = QtWidgets.QLabel(self.centralwidget)
        self.extraneousIntructionLabel.setGeometry(QtCore.QRect(150, 330, 531, 20))
        self.extraneousIntructionLabel.setObjectName("extraneousIntructionLabel")



        self.extraneousDisclaimerLabel = QtWidgets.QLabel(self.centralwidget)
        self.extraneousDisclaimerLabel.setGeometry(QtCore.QRect(115, 360, 2000, 20))
        self.extraneousDisclaimerLabel.setObjectName("extraneousDisclaimerLabel")



        self.p1Button = QtWidgets.QPushButton(self.centralwidget)
        self.p1Button.setGeometry(QtCore.QRect(10, 160, 93, 28))
        self.p1Button.setObjectName("p1Button")
        self.p1Button.clicked.connect(self.p1Setup)



        self.p2Button = QtWidgets.QPushButton(self.centralwidget)
        self.p2Button.setGeometry(QtCore.QRect(70, 220, 93, 28))
        self.p2Button.setObjectName("p2Button")
        self.p2Button.clicked.connect(self.p2Setup)


        self.p4Button = QtWidgets.QPushButton(self.centralwidget)
        self.p4Button.setGeometry(QtCore.QRect(250, 220, 93, 28))
        self.p4Button.setObjectName("p4Button")
        self.p4Button.clicked.connect(self.p4Setup)


        self.p5Button = QtWidgets.QPushButton(self.centralwidget)
        self.p5Button.setGeometry(QtCore.QRect(520, 160, 93, 28))
        self.p5Button.setObjectName("p5Button")
        self.p5Button.clicked.connect(self.p5Setup)


        self.lsButton = QtWidgets.QPushButton(self.centralwidget)
        self.lsButton.setGeometry(QtCore.QRect(340, 160, 93, 28))
        self.lsButton.setObjectName("lsButton")
        self.lsButton.clicked.connect(self.lsSetup)


        self.advisoryButton = QtWidgets.QPushButton(self.centralwidget)
        self.advisoryButton.setGeometry(QtCore.QRect(170, 160, 93, 28))
        self.advisoryButton.setObjectName("advisoryButton")
        self.advisoryButton.clicked.connect(self.advisorySetup)



        self.p7Button = QtWidgets.QPushButton(self.centralwidget)
        self.p7Button.setGeometry(QtCore.QRect(700, 160, 93, 28))
        self.p7Button.setObjectName("p7Button")
        self.p7Button.clicked.connect(self.p7Setup)


        self.p6Button = QtWidgets.QPushButton(self.centralwidget)
        self.p6Button.setGeometry(QtCore.QRect(430, 220, 93, 28))
        self.p6Button.setObjectName("p6Button")
        self.p6Button.clicked.connect(self.p6Setup)


        self.p8Button = QtWidgets.QPushButton(self.centralwidget)
        self.p8Button.setGeometry(QtCore.QRect(610, 220, 93, 28))
        self.p8Button.setObjectName("p8Button")
        self.p8Button.clicked.connect(self.p8Setup)


        self.lsInstructionsLabel = QtWidgets.QLabel(self.centralwidget)
        self.lsInstructionsLabel.setGeometry(QtCore.QRect(150, 100, 491, 20))
        self.lsInstructionsLabel.setObjectName("lsInstructionsLabel")



        self.lsDisclaimerLabel = QtWidgets.QLabel(self.centralwidget)
        self.lsDisclaimerLabel.setGeometry(QtCore.QRect(50, 130, 701, 20))
        self.lsDisclaimerLabel.setObjectName("lsDisclaimerLabel")



        self.extraneousMultipleDayDisclaimerLabel = QtWidgets.QLabel(self.centralwidget)
        self.extraneousMultipleDayDisclaimerLabel.setGeometry(QtCore.QRect(130, 390, 561, 20))
        self.extraneousMultipleDayDisclaimerLabel.setObjectName("extraneousMultipleDayDisclaimerLabel")



        self.extraneous1Button = QtWidgets.QPushButton(self.centralwidget)
        self.extraneous1Button.setGeometry(QtCore.QRect(10, 420, 93, 28))
        self.extraneous1Button.setObjectName("extraneous1Button")
        self.extraneous1Button.clicked.connect(self.e1Setup)


        self.extraneous2Button = QtWidgets.QPushButton(self.centralwidget)
        self.extraneous2Button.setGeometry(QtCore.QRect(360, 420, 93, 28))
        self.extraneous2Button.setObjectName("extraneous2Button")
        self.extraneous2Button.clicked.connect(self.e2Setup)


        self.extraneous3Button = QtWidgets.QPushButton(self.centralwidget)
        self.extraneous3Button.setGeometry(QtCore.QRect(680, 420, 93, 28))
        self.extraneous3Button.setObjectName("extraneous3Button")
        self.extraneous3Button.clicked.connect(self.e3Setup)

        self.endButton = QtWidgets.QPushButton(self.centralwidget)
        self.endButton.setGeometry(QtCore.QRect(360, 545, 93, 28))
        self.endButton.setObjectName("EndButton")
        self.endButton.clicked.connect(self.endCode)


        self.startAutoJoinerButton = QtWidgets.QPushButton(self.centralwidget)
        self.startAutoJoinerButton.setGeometry(QtCore.QRect(290, 490, 231, 51))
        self.startAutoJoinerButton.setObjectName("startAutoJoinerButton")
        self.startAutoJoinerButton.clicked.connect(self.autoJoinerCode)


        self.startAutoJoinerLabel = QtWidgets.QLabel(self.centralwidget)
        self.startAutoJoinerLabel.setGeometry(QtCore.QRect(50, 460, 711, 20))
        self.startAutoJoinerLabel.setObjectName("startAutoJoinerLabel")



        self.statusLabel = QtWidgets.QLabel(self.centralwidget)
        self.statusLabel.setGeometry(QtCore.QRect(620, 500, 150, 30))
        self.statusLabel.setObjectName("statusLabel")



        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "CHS Class Joiner"))
        self.welcomeLabel.setText(_translate("MainWindow", "Welcome to AutoClass Joiner - CHS"))
        self.instructionsLabel.setText(_translate("MainWindow", "To add your link for each period, click on each button below."))
        self.disclaimerLabel.setText(_translate("MainWindow", "If you do not have a class during this period, enter NONE into the popup exactly"))
        self.extraneousHeaderLabel.setText(_translate("MainWindow", "Extraneous/Online Classes: "))
        self.extraneousIntructionLabel.setText(_translate("MainWindow", "Click the following buttons to add up to 3 classes that do not follow the CHS bell schedule"))
        self.extraneousDisclaimerLabel.setText(_translate("MainWindow", "These classes require a DAY(Mon, Tue, Wed, Thu, Fri, Sat, Sun),START TIME, END TIME, and LINK"))
        self.p1Button.setText(_translate("MainWindow", "Period 1"))
        self.p2Button.setText(_translate("MainWindow", "Period 2"))
        self.p4Button.setText(_translate("MainWindow", "Period 4"))
        self.p5Button.setText(_translate("MainWindow", "Period 5"))
        self.lsButton.setText(_translate("MainWindow", "LS"))
        self.advisoryButton.setText(_translate("MainWindow", "Advisory"))
        self.p7Button.setText(_translate("MainWindow", "Period 7"))
        self.p6Button.setText(_translate("MainWindow", "Period 6"))
        self.p8Button.setText(_translate("MainWindow", "Period 8"))
        self.lsInstructionsLabel.setText(_translate("MainWindow", "On the LS Button - Enter the last LS you have had (JUST A NUMBER, for example: 1)"))
        self.lsDisclaimerLabel.setText(_translate("MainWindow", "If an LS passes while this program is not running, you will have to update the last LS again by clicking the LS button below"))
        self.extraneousMultipleDayDisclaimerLabel.setText(_translate("MainWindow", "If an extraneous class occurs on multiple days, please enter it multiple time with a different day"))
        self.extraneous1Button.setText(_translate("MainWindow", "Extraneous 1"))
        self.extraneous2Button.setText(_translate("MainWindow", "Extraneous 2"))
        self.extraneous3Button.setText(_translate("MainWindow", "Extraneous 3"))
        self.endButton.setText(_translate("MainWindow", "Click to End"))
        self.startAutoJoinerButton.setText(_translate("MainWindow", "START AUTO JOINER"))
        self.startAutoJoinerLabel.setText(_translate("MainWindow", "Click the button below to start to auto joiner. Make sure everything is setup first and that you computer will not go to sleep"))
        self.statusLabel.setText(_translate("MainWindow", "Currently: OFF"))
    
    def p1Setup(self):
        link, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Period 1 Link:')
        if(link == ""):
            print("no link added")
        else:
            f = open("Period1.txt", "r+")
            f.truncate(0)
            f.seek(0)
            f.write(link)
            f.close()
    def p2Setup(self):
        link, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Period 2 Link:')
        if(link == ""):
            print("no link added")
        else:
            f = open("Period2.txt", "r+")
            f.truncate(0)
            f.seek(0)
            f.write(link)
            f.close()
    def advisorySetup(self):
        link, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Advisory Link:')
        if(link == ""):
            print("no link added")
        else:
            f = open("Advisory.txt", "r+")
            f.truncate(0)
            f.seek(0)
            f.write(link)
            f.close()
    def p4Setup(self):
        link, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Period 4 Link:')
        if(link == ""):
            print("no link added")
        else:
            f = open("Period4.txt", "r+")
            f.truncate(0)
            f.seek(0)
            f.write(link)
            f.close()
    def p5Setup(self):
        link, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Period 5 Link:')
        if(link == ""):
            print("no link added")
        else:
            f = open("Period5.txt", "r+")
            f.truncate(0)
            f.seek(0)
            f.write(link)
            f.close()
    def p6Setup(self):
        link, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Period 6 Link:')
        if(link == ""):
            print("no link added")
        else:
            f = open("Period6.txt", "r+")
            f.truncate(0)
            f.seek(0)
            f.write(link)
            f.close()
    def p7Setup(self):
        link, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Period 7 Link:')
        if(link == ""):
            print("no link added")
        else:
            f = open("Period7.txt", "r+")
            f.truncate(0)
            f.seek(0)
            f.write(link)
            f.close()
    def p8Setup(self):
        link, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Period 8 Link:')
        if(link == ""):
            print("no link added")
        else:
            f = open("Period8.txt", "r+")
            f.truncate(0)
            f.seek(0)
            f.write(link)
            f.close()
    def lsSetup(self):
        lastLS, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Last LS:')
        if(lastLS == ""):
            print("no ls added")
        else:
            f = open("LS.txt", "r+")
            f.truncate(0)
            f.seek(0)
            f.write(lastLS)
            f.close()
    def e1Setup(self):
        e1Day, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Extraneous Class 1 Day (Mon, Tue, Wed, Thu, Fri, Sat, Sun):')
        e1Link, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Extraneous Class 1 Link:')

        e1JoinTime, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Extraneous Class 1 Join Time (use military time, eg. 20:30):')
        if(len(e1JoinTime) < 5):
            e1JoinTime = "0" + e1JoinTime
        print(e1JoinTime)
        e1JoinTime = self.getTrueTime(e1JoinTime)

        e1EndTime, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Extraneous Class 1 End Time (use military time, eg. 20:30):')
        if(len(e1EndTime) < 5):
            e1EndTime = "0" + e1JoinTime
        print(e1EndTime)
        e1EndTime = self.getTrueTime(e1EndTime)

        f = open("Extraneous1.txt", "r+")
        f.truncate(0)
        f.seek(0)
        f.write(e1Day)
        f.write("\n")
        f.write(e1Link)
        f.write("\n")
        f.write(str(e1JoinTime))
        f.write("\n")
        f.write(str(e1EndTime))
        f.close()
    def e2Setup(self):
        e2Day, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Extraneous Class 2 Day (Mon, Tue, Wed, Thu, Fri, Sat, Sun):')
        e2Link, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Extraneous Class 2 Link:')

        e2JoinTime, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Extraneous Class 2 Join Time (use military time, eg. 20:30):')
        if(len(e2JoinTime) < 5):
            e2JoinTime = "0" + e2JoinTime
        print(e2JoinTime)
        e2JoinTime = self.getTrueTime(e2JoinTime)

        e2EndTime, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Extraneous Class 2 End Time (use military time, eg. 20:30):')
        if(len(e2EndTime) < 5):
            e2EndTime = "0" + e2EndTime
        print(e2EndTime)
        e2EndTime = self.getTrueTime(e2EndTime)

        f = open("Extraneous2.txt", "r+")
        f.truncate(0)
        f.seek(0)
        f.write(e2Day)
        f.write("\n")
        f.write(e2Link)
        f.write("\n")
        f.write(str(e2JoinTime))
        f.write("\n")
        f.write(str(e2EndTime))
        f.close()
    def e3Setup(self):
        e3Day, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Extraneous Class 3 Day (Mon, Tue, Wed, Thu, Fri, Sat, Sun):')
        e3Link, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Extraneous Class 3 Link:')

        e3JoinTime, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Extraneous Class 3 Join Time (use military time, eg. 20:30):')
        if(len(e3JoinTime) < 5):
            e3JoinTime = "0" + e3JoinTime
        print(e3JoinTime)
        e3JoinTime = self.getTrueTime(e3JoinTime)

        e3EndTime, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter Extraneous Class 3 End Time (use military time, eg. 20:30):')
        if(len(e3EndTime) < 5):
            e3EndTime = "0" + e3JoinTime
        print(e3EndTime)
        e3EndTime = self.getTrueTime(e3EndTime)

        f = open("Extraneous3.txt", "r+")
        f.truncate(0)
        f.seek(0)
        f.write(e3Day)
        f.write("\n")
        f.write(e3Link)
        f.write("\n")
        f.write(str(e3JoinTime))
        f.write("\n")
        f.write(str(e3EndTime))
        f.close()
    def endCode(self):
        runInfo, state = QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter END to end AutoClassJoiner')
        if(runInfo == "END"):
            self.statusLabel.setText("Currently: Waiting...")
        f = open("endCode.txt", "r+")
        f.truncate(0)
        f.seek(0)
        f.write(runInfo)
        f.close()

    def getTrueTime(self, s):
        t = s
        #find the hour
        hour = t[0:2]
        #find the minute
        minute = t[3:5]
        #find the number of minutes that have passed
        trueTime = int(hour) * 60 + int(minute)
        #send back trueTime
        return(trueTime)
    
    def autoJoinerCode(self):
        self.statusLabel.setText("Currently: RUNNING...")
        # Step 2: Create a QThread object
        self.thread = QThread()
        # Step 3: Create a worker object
        self.worker = Worker()
        # Step 4: Move worker to the thread
        self.worker.moveToThread(self.thread)
        # Step 5: Connect signals and slots
        self.thread.started.connect(self.worker.run)

        # Step 6: Start the thread
        self.thread.start()

        # Final resets
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        self.startAutoJoinerButton.setEnabled(False)


        self.thread.finished.connect(
            lambda: self.statusLabel.setText("Currently: OFF")
        )
        self.thread.finished.connect(
            lambda: self.startAutoJoinerButton.setEnabled(True)
        )
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
